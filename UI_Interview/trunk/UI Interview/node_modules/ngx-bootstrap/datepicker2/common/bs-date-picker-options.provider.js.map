{"version":3,"sources":["../../../.tmp/datepicker2/common/bs-date-picker-options.provider.ts"],"names":[],"mappings":"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","file":"bs-date-picker-options.provider.js","sourceRoot":"","sourcesContent":["import * as moment from 'moment';\nimport { Injectable, EventEmitter } from '@angular/core';\n\nexport const DatePickerViewModes: { [key: string]: number, days: number, months: number, years: number }\n  = {days: 0, months: 1, years: 2};\nexport type BsDatePickerViewMode = 'days' | 'months' | 'years';\n\nexport interface DatePickerCustomDates {\n  /** Any parse-able date format (new Date(), moment(), string, number) */\n  date: any;\n\n  /** css classes which will be applied to date,\n   * read more about available options in NgClass description\n   */\n  css?: string | string[] | Object;\n\n  /** should this date be disabled */\n  isDisabled?: boolean;\n}\n\nexport interface DatePickerDateOptions {\n  /** minimum available date */\n  min: any;\n  /** maximum available date */\n  max: any;\n  /** initially viewed, not selected, date if value is not set */\n  initial: any;\n  /** initially selected date, if value is not set, in date picker mode */\n  selected: any;\n  /** initially selected end date in date range picker mode */\n  selectedEnd: any;\n}\n\nexport class DatePickerFormatOptions {\n  /** day format in calendar */\n  public day: string = 'D';\n  /** month format in calendar */\n  public month: string = 'MMM';\n  /** year format in calendar */\n  public year: string = 'YYYY';\n  /** weekdays format in calendar */\n  public weekday: string = 'dd';\n  // /** format of title when at days calendar */\n  // dayTitle:string;\n  /** format of month in title */\n  public monthTitle: string = 'MMMM';\n  /** format of year in title */\n  public yearTitle: string = 'YYYY';\n  /** current date format */\n  public currentDate: string = 'LLL';\n}\n\nexport class DatePickerUiOptions {\n  /** show localized week numbers at the start of each week on the calendars */\n  public showWeekNumbers: boolean = true;\n  /** show ISO week numbers at the start of each week on the calendars */\n  public showISOWeekNumbers: boolean = false;\n  /** enables current date under calendar */\n  public showCurrentDate: boolean = true;\n  /** if `true` label `Custom Ranges` will be shown if `ranges` are defined */\n  public showCustomRangeLabel: boolean = true;\n  /** if `false` and one of ranges is selected, calendar will be hidden */\n  public alwaysShowCalendars: boolean = false;\n  /** lower level of view mode */\n  public minMode: BsDatePickerViewMode = 'days';\n  /** upper level of view mode */\n  public maxMode: BsDatePickerViewMode = 'years';\n  /** number of columns displayed in month selection mode */\n  public monthColumns: number = 3;\n  /** number of columns displayed in year selection mode */\n  public yearRows: number = 4;\n  /** number of rows displayed in year selection mode */\n  public yearColumns: number = 5;\n  public dayColums: number = 6;\n  public dayRows: number = 7;\n}\n\nexport class DatePickerLocale {\n  /** locale name */\n  public name: string = 'en';\n  public isRtl: boolean = false;\n  public close: string = 'Close';\n  public apply: string = 'Apply';\n  public reset: string = 'Reset';\n  public customRange: string = 'Custom Range';\n}\n\nexport class TimePickerOptions {\n  public hoursInc: number = 1;\n  /** increment of the minutes selection list for times (i.e. 30 to allow only selection of times ending in 0 or 30) */\n  public minutesInc: number = 10;\n  /** use 24-hour instead of 12-hour times, removing the AM/PM selection */\n  public showAmPm: boolean = true;\n}\n\n\nexport class BsDatePickerOptions {\n  /** current date picker mode */\n  public mode: 'date' | 'daterange' = 'date';\n  /** current date picker view mode (if supported) */\n  public viewMode: BsDatePickerViewMode = 'days';\n\n  public ui: DatePickerUiOptions = new DatePickerUiOptions();\n  public date: DatePickerDateOptions = {} as DatePickerDateOptions;\n  public format: DatePickerFormatOptions = new DatePickerFormatOptions();\n  public locale: string | DatePickerLocale = 'en';\n  public timepicker: TimePickerOptions = new TimePickerOptions();\n\n  public customDates: DatePickerCustomDates[];\n  /** predefined set of ranges {'today': [moment(), moment()]} */\n  public ranges: { [key: string]: moment.Moment[]|string[]|Date[] };\n\n  public onUpdate: EventEmitter<BsDatePickerOptions> = new EventEmitter();\n\n  // public static setDefaults(options: any): void {\n  //   Object.assign(defaults, options);\n  // }\n\n  public update(options: any): BsDatePickerOptions {\n    const {mode, viewMode, ui, date, format, locale, timepicker, customDates, ranges} = options;\n    if (mode && (mode === 'date' || mode === 'daterange')) {\n      this.mode = mode;\n    }\n\n    if (viewMode && viewMode in DatePickerViewModes) {\n      this.viewMode = viewMode;\n    }\n\n    // UI options\n    if (ui) {\n      // mini maxy view modes\n      if (ui.minMode in DatePickerViewModes) {\n        this.ui.minMode = ui.minMode;\n      }\n\n      if (ui.maxMode in DatePickerViewModes) {\n        if (DatePickerViewModes[this.ui.maxMode] > DatePickerViewModes[this.ui.minMode]) {\n          this.ui.maxMode = ui.maxMode;\n        } else {\n          this.ui.maxMode = this.ui.minMode;\n        }\n      }\n\n      // if view mode is lesser than min -> fix view mode\n      if (DatePickerViewModes[this.ui.minMode] > DatePickerViewModes[this.viewMode]) {\n        this.viewMode = this.ui.minMode;\n      }\n\n      // if view mode is gt than max -> fix view mode\n      if (DatePickerViewModes[this.ui.maxMode] < DatePickerViewModes[this.viewMode]) {\n        this.viewMode = this.ui.maxMode;\n      }\n\n      if (typeof ui.showWeekNumbers !== 'undefined') {\n        this.ui.showWeekNumbers = !!ui.showWeekNumbers;\n      }\n\n      if (typeof ui.showCurrentDate !== 'undefined') {\n        this.ui.showCurrentDate = !!ui.showCurrentDate;\n      }\n\n      if (typeof ui.showCustomRangeLabel !== 'undefined') {\n        this.ui.showCustomRangeLabel = !!ui.showCustomRangeLabel;\n      }\n\n      if (typeof ui.alwaysShowCalendars !== 'undefined') {\n        this.ui.alwaysShowCalendars = !!ui.alwaysShowCalendars;\n      }\n\n      // this.ui = Object.assign({}, this.ui, ui);\n    }\n\n    // Ranges options\n    if (ranges) {\n      this.ranges = ranges;\n    }\n\n    // Timepicker options\n    if (timepicker) {\n      if (typeof timepicker.showAmPm === 'boolean') {\n        this.timepicker.showAmPm = timepicker.showAmPm;\n      }\n    }\n\n    if (format) {\n      this.format = Object.assign({}, this.format, format);\n    }\n\n    // Object.assign(this, options);\n    this.onUpdate.emit(this);\n    return this;\n  }\n\n  public get isDatePicker(): boolean {\n    return this.mode === 'date';\n  }\n\n  public get isDateRangePicker(): boolean {\n    return this.mode === 'daterange';\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}